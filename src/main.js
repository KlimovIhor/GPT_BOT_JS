const { HtmlTelegramBot, userInfoToString } = require("./bot");
const ChatGptService = require("./gpt");

class MyTelegramBot extends HtmlTelegramBot {
    constructor(token) {
        super(token);
        this.mod = null;
        this.list = [];
        this.user = {};  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è user –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        this.count = 0;  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è count –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    }

    async start(msg) {
        this.mod = "main";
        this.list = [];  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
        const text = this.loadMessage("main");
        await this.sendImage("main");
        await this.sendText(text);

        await this.showMainMenu({
            "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
            "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–∏–ª—è üòé",
            "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
            "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
            "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
            "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†",
            "html": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è HTML"
        });
    }

    async html(msg) {
        await this.sendHTML('<h3 style="color: hotpink">Hello World!</h3>');
        const html = this.loadHtml("main");
        await this.sendHTML(html, { theme: "dark" });
    }

    async gpt(msg) {
        this.mod = "gpt";
        this.list = [];  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ —Ä–µ–∂–∏–º GPT
        const text = this.loadMessage("gpt");
        await this.sendImage("gpt");
        await this.sendText(text);
    }

    async gptDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ —á–∞—Ç—É GPT, –æ–∂–∏–¥–∞–π—Ç–µ...");
        const answer = await chatgpt.sendQuestion("–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", text);
        await this.editText(myMessage, answer);
    }

    async date(msg) {
        this.mod = "date";
        this.list = [];
        const text = this.loadMessage("date");
        await this.sendImage("date");
        await this.sendTextButtons(text, {
            "date_grande": "–ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ",
            "date_robbie": "–ú–∞—Ä–≥–æ –†–æ–±–±–∏",
            "date_zendaya": "–ó–µ–Ω–¥–µ—è",
            "date_gosling": "–†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥",
            "date_hardy": "–¢–æ–º –•–∞—Ä–¥–∏",
        });
    }

    async dateButton(callbackQuery) {
        const query = callbackQuery.data;
        await this.sendImage(query);
        await this.sendText("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä");
        const prompt = this.loadPrompt(query);
        chatgpt.setPrompt(prompt);
    }

    async dateDialog(msg) {
        const text = msg.text;
        const myMessage = await this.sendText("–ù–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...");
        const answer = await chatgpt.addMessage(text);
        await this.editText(myMessage, answer);
    }

    async message(msg) {
        this.mod = "message";
        this.list = [];  // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏
        const text = this.loadMessage("message");
        await this.sendImage("message");
        await this.sendTextButtons(text, {
            "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
            "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ",
        });
    }

    async messageButton(callbackQuery) {
        const query = callbackQuery.data;
        const prompt = this.loadPrompt(query);
        const userChatHistory = this.list.join("\n\n");

        const myMessage = await this.sendText("–ß–∞—Ç GPT –¥—É–º–∞–µ—Ç –Ω–∞–¥ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞...");
        const answer = await chatgpt.sendQuestion(prompt, userChatHistory);
        await this.editText(myMessage, answer);
    }

    async messageDialog(msg) {
        const text = msg.text;
        this.list.push(text);
    }

    async profile(msg) {
        this.mod = "profile";
        const text = this.loadMessage("profile");
        await this.sendImage("profile");
        await this.sendText(text);
        this.user = {};
        this.count = 0;

        await this.sendText("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?");
    }

    async profileDialog(msg) {
        const text = msg.text;
        this.count++;

        if (this.count === 1) {
            this.user["age"] = text;
            await this.sendTextButtons("–ö–µ–º –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?", {});
        } else if (this.count === 2) {
            this.user["occupation"] = text;
            await this.sendTextButtons("–£ –≤–∞—Å –µ—Å—Ç—å —Ö–æ–±–±–∏?", {});
        } else if (this.count === 3) {
            this.user["hobby"] = text;
            await this.sendTextButtons("–ß—Ç–æ –≤–∞–º –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –≤ –ª—é–¥—è—Ö?", {});
        } else if (this.count === 4) {
            this.user["annoys"] = text;
            await this.sendTextButtons("–ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", {});
        } else if (this.count === 5) {
            this.user["goals"] = text;


        }
    }

    async opener(msg) {
        this.mod = "opener";
        const text = this.loadMessage("opener");
        await this.sendImage("opener");
        await this.sendText(text);
        this.user = {}
            this.count = 0;
            await this.sendText("–ò–º—è –¥–µ–≤—É—à–∫–∏ ?")

    }

    async openerDialog(msg) {

        const text = msg.text;
        this.count++;

        if (this.count === 1) {
            this.user["name"] = text;
            await this.sendTextButtons("–°–∫–æ–ª—å–∫–æ –µ–π –ª–µ—Ç?", {});
        }
        if (this.count === 2) {
            this.user["age"] = text;
            await this.sendTextButtons("–û—Ü–µ–Ω–∏—Ç–µ –µ—ë –≤–Ω–µ—à–Ω–æ—Å—Ç—å : 1-10 –±–∞–ª–æ–≤", {});
        }
        if (this.count === 3) {
            this.user["occupation"] = text;
            await this.sendTextButtons("–ö–µ–º –æ–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç?", {});
        }
        if (this.count === 4) {
            this.user["goals"] = text;
            const prompt = this.loadPrompt("profile");
            const info = userInfoToString(this.user);

            const myMessage = await this.sendText("–ß–∞—Ç GPT –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤–∞—à–µ–≥–æ –æ—É–ø–µ–Ω–∞—Ä–∞...");
            const answer = await chatgpt.sendQuestion(prompt, info);
            await this.editText(myMessage, answer);
        }

    }

    async hello(msg) {
        if (this.mod === "gpt")
            await this.gptDialog(msg);
        else if (this.mod === "date")
            await this.dateDialog(msg);
        else if (this.mod === "message")
            await this.messageDialog(msg);
        else if (this.mod === "profile")
            await this.profileDialog(msg);
        else if (this.mod === "opener")
            await this.openerDialog(msg);
        else {
            const text = msg.text;

            await this.sendText("<b>Hello!</b>");
            await this.sendText("<i>How are you?</i>");
            await this.sendText(`–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: ${text}`);
            await this.sendImage("avatar_main");

            await this.sendTextButtons("What is your Telegram theme?", {
                "theme_light": "Light",
                "theme_dark": "Dark",
            });
        }
    }

    async helloButton(callbackQuery) {
        const query = callbackQuery.data;
        if (query === "theme_light")
            await this.sendText("–£ –≤–∞—Å —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞");
        else if (query === "theme_dark")
            await this.sendText("–£ –≤–∞—Å —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞");
    }
}

const chatgpt = new ChatGptService("gpt:fXtFfefcMJW5gbKvJxHPJFkblB3TaymEaIPsJ1W67t7kdwMM");
const bot = new MyTelegramBot("6590689196:AAEp9CRMlH8JaBaZ8QnHNktpalTKLOAps2Q");

bot.onCommand(/\/start/, bot.start.bind(bot));
bot.onCommand(/\/html/, bot.html.bind(bot));
bot.onCommand(/\/gpt/, bot.gpt.bind(bot));
bot.onCommand(/\/date/, bot.date.bind(bot));
bot.onCommand(/\/message/, bot.message.bind(bot));
bot.onCommand(/\/profile/, bot.profile.bind(bot));
bot.onCommand(/\/opener/, bot.opener.bind(bot));
bot.onTextMessage(bot.hello.bind(bot));
bot.onButtonCallback(/^date_.*/, bot.dateButton.bind(bot));
bot.onButtonCallback(/^message_.*/, bot.messageButton.bind(bot));
bot.onButtonCallback(/^.*/, bot.helloButton.bind(bot));